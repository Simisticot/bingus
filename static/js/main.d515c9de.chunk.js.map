{"version":3,"sources":["App.js","bingo/Cell.js","bingo/Board.js","Helpers.js","reportWebVitals.js","index.js"],"names":["Cell","locked","id","handleChange","text","checked","toggleChecked","winning","onClick","className","placeholder","onChange","event","target","value","textChanged","type","Board","height","width","cellText","cellChecked","cellWin","numCells","rows","i","push","length","cells","map","cell","coordsToIndex","coords","dimensions","y","x","oneIfChecked","checkedArray","isChecked","makeRowWinning","winArray","cursor","makeColumnWinning","isRowWinning","score","isColumnWinning","initChecked","initCellText","initWin","App","useState","setLocked","setCellText","setCellChecked","setCellWin","updateWins","newWins","winningRows","newWinningRows","checkRowsForWins","winningColumns","newWinningColumns","checkColumnsForWins","isRisingWinning","makeRisingWinning","isFallingWinning","makeFallingWinning","shuffleCells","newText","newChecked","array1","array2","j","Math","floor","random","swap","array","tmp","mirrorShuffle","cellId","cellContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d515c9de.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport './App.css';\r\nimport Board from './bingo/Board';\r\nimport {mirrorShuffle, checkRowsForWins, makeRowWinning, checkColumnsForWins, makeColumnWinning, isRisingWinning, makeRisingWinning, isFallingWinning, makeFallingWinning} from './Helpers';\r\n\r\n  const height = 5;\r\n  const width = 5;\r\n  const dimensions = {height: height, width: width}\r\n  const numCells = height*width;\r\n\r\n  let initChecked = [];\r\n  let initCellText = [];\r\n  let initWin = [];\r\n\r\n  for(let i = 0; i < numCells; i++){\r\n    initCellText.push(\"\");\r\n  }\r\n  for(let i = 0; i < numCells; i++){\r\n    initChecked.push(false);\r\n  }\r\n  for(let i = 0; i < numCells; i++){\r\n    initWin.push(false);\r\n  }\r\n\r\nfunction App() {\r\n  \r\n  const [locked, setLocked] = useState(false);\r\n\r\n  const [cellText, setCellText] = useState(initCellText);\r\n\r\n  const [cellChecked, setCellChecked] = useState(initChecked);\r\n\r\n  const [cellWin, setCellWin] = useState(initWin);\r\n\r\n  const toggleChecked = (cellId) => {\r\n    let newChecked = [...cellChecked];\r\n    newChecked[cellId] = !cellChecked[cellId];\r\n    setCellChecked(newChecked);\r\n    updateWins(newChecked);\r\n  }\r\n\r\n  const updateWins = (cellChecked) => {\r\n    let newWins = [];\r\n    for(let i = 0; i < numCells; i++){\r\n      newWins.push(false);\r\n    }\r\n    let winningRows = checkRowsForWins(cellChecked, dimensions);\r\n    for(let i = 0; i < dimensions.height; i++){\r\n      if(winningRows[i]){\r\n        makeRowWinning(newWins, i, dimensions);\r\n      }\r\n    }\r\n    let winningColumns = checkColumnsForWins(cellChecked, dimensions);\r\n    for(let i = 0; i < dimensions.width; i++){\r\n      if(winningColumns[i]){\r\n        makeColumnWinning(newWins, i, dimensions);\r\n      }\r\n    }\r\n    if(isRisingWinning(cellChecked, dimensions)){\r\n      makeRisingWinning(newWins, dimensions);\r\n    }\r\n    if(isFallingWinning(cellChecked, dimensions)){\r\n      makeFallingWinning(newWins, dimensions);\r\n    }\r\n    setCellWin(newWins);\r\n  }\r\n\r\n\r\n  const handleChange = (cellId, cellContent) => {\r\n      let newText = [...cellText];\r\n      newText[cellId] = cellContent;\r\n      setCellText(newText);\r\n  }\r\n\r\n  const shuffleCells = () => {\r\n      let newText = [...cellText];\r\n      let newChecked = [...cellChecked];\r\n      mirrorShuffle(newText, newChecked);\r\n      setCellText(newText);\r\n      setCellChecked(newChecked);\r\n      updateWins(newChecked);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='title'>Bingus</div>\r\n      <Board height={height} width={width} locked={locked} cellText={cellText} handleChange={handleChange} cellChecked={cellChecked} toggleChecked={toggleChecked} cellWin={cellWin} numCells={numCells} />\r\n      <div className='buttons'>\r\n        <button id=\"lock\" onClick={() => setLocked(locked ? false : true)}>{locked ? <span>Unlock</span> : <span>Lock</span>}</button>\r\n        <button id=\"shuffle\" onClick={() => shuffleCells()}>Shuffle</button>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\r\nconst Cell = ({locked, id,  handleChange, text, checked, toggleChecked, winning}) => {\r\n\r\n    const textChanged = (event) =>{\r\n        handleChange(id, event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div id={id} onClick={() => {if(locked){toggleChecked(id)}}} className={'square cell '+(checked ? 'checked' : 'unchecked')+' '+(locked ? 'locked' : 'unlocked')+' '+(winning ? 'winning' : 'notWinning')} >\r\n            <div className=\"content\">{locked ? <p>{text}</p> : <textarea placeholder=\"Write down some text to create your card then lock it to play\" onChange={event => textChanged(event)} value={text} type=\"text\"/>}</div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Cell;","import Cell from \"./Cell\";\r\n\r\nconst Board = ({height, width, locked, handleChange, cellText, cellChecked, toggleChecked, cellWin, numCells}) => {\r\n    let rows = [];\r\n   \r\n    for(let i = 0; i < height; i++){\r\n        rows.push({id: i, length: width});\r\n    }\r\n\r\n    let cells = [];\r\n\r\n    for(let i = 0; i < numCells; i++){\r\n        cells.push({id: i, checked: cellChecked[i], winning: cellWin[i], text: cellText[i]});\r\n    }\r\n\r\n    return ( \r\n        <div className=\"Board\">\r\n            <div className=\"square-container\">\r\n                    {\r\n                        cells.map(cell => <Cell locked={locked} id={cell.id} key={cell.id} handleChange={handleChange} text={cell.text} checked={cell.checked} toggleChecked={toggleChecked} winning={cell.winning} />)\r\n                    }\r\n            </div>\r\n        </div> \r\n    );\r\n}\r\n \r\nexport default Board;","export const mirrorShuffle = (array1, array2) => {\r\n    for(let i = 0; i < array1.length; i++){\r\n        let j = Math.floor(Math.random()*array1.length);\r\n        swap(array1, i, j);\r\n        swap(array2, i, j);\r\n    }\r\n    function swap(array, i, j){\r\n        let tmp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = tmp;\r\n    }\r\n}\r\n\r\nexport const indexToCoords = (index, dimensions) => {\r\n    let x = index%dimensions.width;\r\n    let y = (index-x)/dimensions.width;\r\n    return {x: x, y: y};\r\n}\r\n\r\nexport  const coordsToIndex = (coords, dimensions) => {\r\n    return ( coords.y * dimensions.width ) + coords.x;\r\n}\r\n\r\nexport const isPermutation = (a, b) => {\r\n    if (a.length !== b.length) return false;\r\n    let map = new Map(a.map(x => [x, { count: 0 }]));\r\n    a.forEach(x => map.get(x).count++);\r\n    return b.every(x => {\r\n         let match = map.get(x);\r\n         return match && match.count--;\r\n    });\r\n}\r\n\r\nexport   const oneIfChecked = (coords, checkedArray, dimensions) => {\r\n   return isChecked(coords, checkedArray, dimensions) ? 1 : 0;\r\n}\r\n\r\nexport const isChecked = (coords, checkedArray, dimensions) => {\r\n    return checkedArray[coordsToIndex(coords, dimensions)];\r\n}\r\n\r\nexport const makeRowWinning = (winArray, height, dimensions) => {\r\n  for(let cursor = {x: 0, y: height}; cursor.x < dimensions.width; cursor.x++){\r\n    winArray[coordsToIndex(cursor, dimensions)] = true;\r\n  }\r\n}\r\n\r\nexport const makeColumnWinning = (winArray, width, dimensions) => {\r\n  for(let cursor = {y: 0, x: width}; cursor.y < dimensions.height; cursor.y++){\r\n    winArray[coordsToIndex(cursor, dimensions)] = true;\r\n  }\r\n}\r\n\r\nexport const makeRisingWinning = (winArray, dimensions) => {\r\n  for(let cursor = {x: 0, y: dimensions.height-1}; cursor.y >= 0 && cursor.x < dimensions.width; cursor.y--, cursor.x++){\r\n    winArray[coordsToIndex(cursor, dimensions)] = true;\r\n  }\r\n}\r\n\r\nexport const makeFallingWinning = (winArray, dimensions) => {\r\n  for(let cursor = {x: 0, y: 0}; cursor.y < dimensions.height && cursor.x < dimensions.width; cursor.y++, cursor.x++){\r\n    winArray[coordsToIndex(cursor, dimensions)] = true;\r\n  }\r\n}\r\n\r\nexport const isRisingWinning = (checkedArray, dimensions) => {\r\n  if(dimensions.width !== dimensions.height){\r\n    return false;\r\n  }\r\n  let score = 0;\r\n  for(let cursor = {x: 0, y: dimensions.height-1}; cursor.y >= 0 && cursor.x < dimensions.width; cursor.y--, cursor.x++){\r\n    score = score+oneIfChecked(cursor, checkedArray, dimensions);\r\n  }\r\n  return score === dimensions.width;\r\n}\r\n\r\nexport const isFallingWinning = (checkedArray, dimensions) => {\r\n  if(dimensions.width !== dimensions.height){\r\n    return false;\r\n  }\r\n  let score = 0;\r\n  for(let cursor = {x: 0, y: 0}; cursor.y < dimensions.height && cursor.x < dimensions.width; cursor.y++, cursor.x++){\r\n    score = score+oneIfChecked(cursor, checkedArray, dimensions);\r\n  }\r\n  return score === dimensions.width;\r\n}\r\n\r\nexport const checkRowsForWins = (checkedArray, dimensions) => {\r\n  let newWinningRows = [];\r\n  for(let i = 0; i < dimensions.height; i++){\r\n    newWinningRows[i] = isRowWinning(checkedArray, dimensions, i);\r\n  }\r\n  return newWinningRows;\r\n}\r\n\r\nexport const checkColumnsForWins = (checkedArray, dimensions) => {\r\n  let newWinningColumns = [];\r\n  for(let i = 0; i < dimensions.width; i++){\r\n    newWinningColumns[i] = isColumnWinning(checkedArray, dimensions, i);\r\n  }\r\n  return newWinningColumns;\r\n}\r\n\r\nexport const isRowWinning = (checkedArray, dimensions, height) => {\r\n  let score = 0;\r\n  for(let cursor = {x: 0, y: height}; cursor.x < dimensions.width; cursor.x++){\r\n    score = score+oneIfChecked(cursor, checkedArray, dimensions);\r\n  }\r\n  return score === dimensions.width;\r\n}\r\n\r\nexport const isColumnWinning = (checkedArray, dimensions, width) => {\r\n  let score = 0;\r\n  for(let cursor = {x: width, y: 0}; cursor.y < dimensions.height; cursor.y++){\r\n    score = score+oneIfChecked(cursor, checkedArray, dimensions);\r\n  }\r\n  return score === dimensions.height;\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}